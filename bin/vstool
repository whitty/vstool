#!/usr/bin/ruby

# (C) Copyright Greg Whiteley 2009-2013
# 
#  This is free software: you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation, either version 3 of
#  the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'pathname'

# use local copy of OcraTools
require 'vstool/ocratools'
OcraTools.modify_facets_path

require 'vstool'
require 'gw_command'
require 'enumerator'
require 'timeout'

HAVE_WIN32OLE_ROT = begin
                      gem 'win32olerot', ">=0.0.2"    # require exception fix
                      true
                    rescue Gem::LoadError
                      false
                    end

require 'win32olerot' if HAVE_WIN32OLE_ROT

exit if OcraTools.ocra_is_compiling?

def optional_project(args)
  args.push(nil)
end

def max_args(args, max)
  raise Command::CommandError.new("Unexpected extra parameters") if args.length > max
end

parser = Command::Toplevel.new("vstool", VsTool::VERSION) do |tl|
  config = VsTool::Config.new

  tl.block_command(:debug, "Start the debugger going - equivalent to\n#{" "*37}'go'") do |cmd|
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      VsTool::DebugCommand.new(config).run(*args)
    end
  end

  tl.block_command(:forcebreak, "Continue restarting debugger until a break\n#{" "*37}occurs") do |cmd|
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      VsTool::RunToDebugBreak.new(config).run(*args)
    end
  end

  tl.block_command(:stop, "Stop the debugger and terminate any\n#{" "*37}processes - equivalent to 'Terminate All'") do |cmd|
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      VsTool::StopCommand.new(config).run(*args)
    end
  end

  tl.block_command(:pop, "Start visual studio and open any files\n#{" "*37}given after the command") do |cmd|
    timeout = nil
    cmd.usage_suffix = "[files...]"
    cmd.parms do |opts|
      opts.on("--timeout [SECS]", Float, "number of seconds to attempt to load files for (allowance for VS to startup) default is 30 seconds") do |f|
        raise Command::CommandError.new("Negative timeouts not supported") if f < 0
        timeout = f
      end
    end
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      VsTool::PopCommand.new(config, timeout).run(*args)
    end
  end

  tl.block_command(:breakpoint, "Add breakpoints") do |cmd|
    cmd.usage_suffix = "Breakpoint [...]"
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length == 1

      VsTool::BreakpointCommand.new(config).run(*args)
    end
  end

  tl.block_command(:attach, "Attach the debugger to a given process") do |cmd|
    cmd.usage_suffix = "Process"
    engines = []
    cmd.parms do |opts|
      opts.on("--engine [engine]", Array, [:native, :managed], "Select debugging engine to use") do |e|
        engines << e
      end
    end
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length == 1

      engines = [:native] if engines.length == 0
      engines = engines.map {|x| x.to_s}.uniq

      VsTool::AttachCommand.new(config, engines).run(*args)
    end
  end

  tl.block_command(:detach, "Detach the debugger to a given process") do |cmd|
    cmd.usage_suffix = "Process"
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length == 1

      VsTool::DetachCommand.new(config).run(*args)
    end
  end

  tl.block_command(:open, "Load the given file into the editor window") do |cmd|
    cmd.usage_suffix = "File [...]"
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length == 1

      VsTool::OpenCommand.new(config).run(*args)
    end
  end

  tl.block_command(:build, "Build the solution - equivalent to 'Build\n#{" "*37}Solution'") do |cmd|
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      VsTool::BuildCommand.new(config).run(*args)
    end
  end

  tl.block_command(:project, "Build a project and all its dependencies") do |cmd|
    both = false
    configuration = nil
    cmd.usage_suffix = "Project"

    cmd.parms do |opts|
      opts.on("-c", "--configuration [CONFIGURATION]", "Specify a configuration name to build NOTE: omitting a configuration will build the current \"active\" configuration") do |v|
        configuration = v.to_s
      end

      opts.on("-b", "--both-configurations", "Build both \"Release\" and \"Debug\" configurations for each project") do |v|
        both = v
      end 
    end

    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length == 1

      VsTool::BuildProjectCommand.new(config,
                                      :both => both,
                                      :configuration => configuration).run(*args)
    end
  end
  
  tl.block_command(:configuration, "Get or set the active configuration (eg\n#{" "*37}\"Release\" and \"Debug\")") do |cmd|
    cmd.usage_suffix = "Configuration"

    cmd.run do |args|

      # allow implicit solution
      if args.length == 0
        args = [nil]
      elsif args.length == 1
        args = [nil].concat(args) if args[0] !~ /\.(sln|exe)$/i
      end

      VsTool::ConfigurationCommand.new(config).run(*args)
    end
  end

  tl.block_command(:isopen, "Indicate if a given solution is running") do |cmd|
    cmd.run do |args|
      # allow implicit solution
      optional_project(args) if args.length < 1

      exit(VsTool::IsOpen.new(config).run(*args))
    end
  end

end
command = parser.parse(ARGV)
